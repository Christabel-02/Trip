import { useEffect, useState, useRef } from 'react'
import { useNavigate } from 'react-router-dom'
import { motion } from 'framer-motion'
import { FaPlane, FaCalendarAlt, FaMapMarkedAlt, FaDownload, FaCheck, FaShare, FaEnvelope } from 'react-icons/fa'
import { useTrip } from '../../context/TripContext'
import { formatDuration, formatPrice } from '../../services/flightService'
import { getActivityIconByType } from '../../services/attractionsService'
import html2canvas from 'html2canvas'
import jsPDF from 'jspdf'

const Itinerary = () => {
  const { state, dispatch } = useTrip()
  const navigate = useNavigate()
  const itineraryRef = useRef(null)
  
  const [generating, setGenerating] = useState(false)
  const [generatingPDF, setGeneratingPDF] = useState(false)
  const [downloadSuccess, setDownloadSuccess] = useState(false)
  const [itineraryDays, setItineraryDays] = useState([])
  
  useEffect(() => {
    // Redirect to first step if no destination is set
    if (!state.destination) {
      navigate('/plan/details')
      return
    }
    
    // Generate itinerary days
    generateItinerary()
    
    // Mark this step as completed
    dispatch({ type: 'COMPLETE_STEP', payload: 5 })
  }, [state, dispatch, navigate])
  
  const generateItinerary = () => {
    setGenerating(true)
    
    // Create a day-by-day itinerary
    const days = []
    const activities = [...state.activities]
    
    // Calculate activities per day (try to distribute evenly)
    const activitiesPerDay = Math.ceil(activities.length / state.numDays)
    
    // Generate an array of dates for the trip
    const dates = []
    const startDate = new Date(state.startDate)
    for (let i = 0; i < state.numDays; i++) {
      const date = new Date(startDate)
      date.setDate(startDate.getDate() + i)
      dates.push(date)
    }
    
    // Build the itinerary day by day
    for (let i = 0; i < state.numDays; i++) {
      const date = dates[i]
      const dayActivities = activities.splice(0, activitiesPerDay)
      
      days.push({
        day: i + 1,
        date,
        activities: dayActivities,
        weatherInfo: state.weatherData?.forecast?.[i] || null,
      })
    }
    
    setItineraryDays(days)
    setGenerating(false)
  }
  
  const handleDownloadPDF = async () => {
    if (!itineraryRef.current) return
    
    setGeneratingPDF(true)
    
    try {
      const itineraryElement = itineraryRef.current
      const canvas = await html2canvas(itineraryElement, {
        scale: 2,
        logging: false,
        useCORS: true
      })
      
      const imgData = canvas.toDataURL('image/png')
      const pdf = new jsPDF('p', 'mm', 'a4')
      const pdfWidth = pdf.internal.pageSize.getWidth()
      const pdfHeight = pdf.internal.pageSize.getHeight()
      
      const imgWidth = canvas.width
      const imgHeight = canvas.height
      const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight)
      const imgX = (pdfWidth - imgWidth * ratio) / 2
      const imgY = 30
      
      // Add title
      pdf.setFontSize(20)
      pdf.text('TripNest Itinerary', pdfWidth / 2, 20, { align: 'center' })
      
      // Add image
      pdf.addImage(imgData, 'PNG', imgX, imgY, imgWidth * ratio, imgHeight * ratio)
      
      // Add footer
      pdf.setFontSize(10)
      pdf.text('Generated by TripNest - www.tripnest.com', pdfWidth / 2, pdfHeight - 10, { align: 'center' })
      
      // Save the PDF
      pdf.save(`TripNest_Itinerary_${state.destination.split(',')[0]}.pdf`)
      
      // Show success message
      setDownloadSuccess(true)
      setTimeout(() => {
        setDownloadSuccess(false)
      }, 3000)
    } catch (error) {
      console.error('Error generating PDF:', error)
    }
    
    setGeneratingPDF(false)
  }
  
  const handleNewTrip = () => {
    // Reset the trip state
    dispatch({ type: 'RESET_TRIP' })
    
    // Navigate to the first step
    navigate('/plan/details')
  }
  
  if (generating) {
    return (
      <div className="flex flex-col justify-center items-center py-12">
        <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-primary-500 mb-4"></div>
        <p className="text-gray-600">Generating your itinerary...</p>
      </div>
    )
  }
  
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">Your Itinerary</h2>
        
        <div className="flex items-center space-x-3">
          <button 
            className={`btn ${generatingPDF ? 'btn-disabled' : 'btn-primary'} flex items-center`}
            onClick={handleDownloadPDF}
            disabled={generatingPDF}
          >
            {generatingPDF ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-white mr-2"></div>
                Generating PDF...
              </>
            ) : (
              <>
                <FaDownload className="mr-2" /> Download Itinerary
              </>
            )}
          </button>
          
          <button className="btn btn-secondary flex items-center">
            <FaShare className="mr-2" /> Share
          </button>
        </div>
      </div>
      
      {downloadSuccess && (
        <motion.div 
          className="bg-green-100 border border-green-200 text-green-800 px-4 py-3 rounded-md mb-6 flex items-center"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -20 }}
        >
          <FaCheck className="mr-2 text-green-600" />
          Your itinerary has been successfully downloaded!
        </motion.div>
      )}
      
      <div className="bg-white border border-gray-200 rounded-lg shadow-sm p-6 mb-8" ref={itineraryRef}>
        <div className="mb-6 border-b border-gray-200 pb-6">
          <h1 className="text-3xl font-bold mb-2">Trip to {state.destination}</h1>
          <div className="flex flex-wrap gap-4 text-gray-600">
            <div className="flex items-center">
              <FaCalendarAlt className="text-primary-500 mr-2" />
              <span>
                {new Date(state.startDate).toLocaleDateString('en-US', {
                  month: 'short',
                  day: 'numeric',
                  year: 'numeric'
                })} - {new Date(state.endDate).toLocaleDateString('en-US', {
                  month: 'short',
                  day: 'numeric',
                  year: 'numeric'
                })}
              </span>
            </div>
            <div className="flex items-center">
              <FaMapMarkedAlt className="text-primary-500 mr-2" />
              <span>{state.numDays} {state.numDays === 1 ? 'day' : 'days'}</span>
            </div>
          </div>
        </div>
        
        {/* Trip Summary */}
        <div className="mb-8 grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Travelers */}
          <div className="bg-gray-50 rounded-md p-4">
            <h3 className="font-medium mb-3">Travelers</h3>
            <ul className="space-y-2">
              {state.travelers.kids > 0 && (
                <li className="flex items-center">
                  <span className="text-lg mr-2">👶</span>
                  <span>Children: {state.travelers.kids}</span>
                </li>
              )}
              {state.travelers.adultsUnder50 > 0 && (
                <li className="flex items-center">
                  <span className="text-lg mr-2">👤</span>
                  <span>Adults (18-50): {state.travelers.adultsUnder50}</span>
                </li>
              )}
              {state.travelers.adultsOver50 > 0 && (
                <li className="flex items-center">
                  <span className="text-lg mr-2">🧓</span>
                  <span>Adults (50+): {state.travelers.adultsOver50}</span>
                </li>
              )}
              {state.needsMedicalAssistance && (
                <li className="flex items-center text-amber-600">
                  <span className="text-lg mr-2">🏥</span>
                  <span>Medical assistance may be needed</span>
                </li>
              )}
            </ul>
          </div>
          
          {/* Flight Info */}
          {state.flights && state.flights.length > 0 && (
            <div className="bg-gray-50 rounded-md p-4">
              <h3 className="font-medium mb-3">Flight Information</h3>
              <div className="flex items-center mb-2">
                <FaPlane className="text-primary-500 mr-2" />
                <span>{state.flights[0].airline} ({state.flights[0].flightNumber})</span>
              </div>
              <div className="flex items-center justify-between mb-2">
                <div>
                  <p className="font-bold">{state.flights[0].departureTime}</p>
                  <p className="text-sm text-gray-600">{state.departureCity.split(',')[0]}</p>
                </div>
                <div className="text-center">
                  <p className="text-xs text-gray-500">
                    {formatDuration(state.flights[0].duration)}
                  </p>
                  <div className="w-16 h-px bg-gray-300 relative">
                    <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-1.5 h-1.5 bg-primary-500 rounded-full"></div>
                  </div>
                </div>
                <div>
                  <p className="font-bold">{state.flights[0].arrivalTime}</p>
                  <p className="text-sm text-gray-600">{state.destination.split(',')[0]}</p>
                </div>
              </div>
              <p className="font-bold text-primary-700">
                {formatPrice(state.flights[0].price)}
              </p>
            </div>
          )}
        </div>
        
        {/* Day-by-Day Itinerary */}
        <h3 className="text-xl font-bold mb-4">Day-by-Day Itinerary</h3>
        <div className="space-y-6">
          {itineraryDays.map((day) => (
            <div key={day.day} className="border border-gray-200 rounded-md overflow-hidden">
              <div className="bg-primary-50 p-4 border-b border-gray-200">
                <div className="flex justify-between items-center">
                  <h4 className="font-medium text-lg">Day {day.day}: {day.date.toLocaleDateString('en-US', {
                    weekday: 'long',
                    month: 'long',
                    day: 'numeric'
                  })}</h4>
                  
                  {day.weatherInfo && (
                    <div className="flex items-center">
                      <img 
                        src={`https://openweathermap.org/img/wn/${day.weatherInfo.weather.icon}.png`}
                        alt={day.weatherInfo.weather.description}
                        className="w-8 h-8"
                      />
                      <span className="text-sm">
                        {day.weatherInfo.temp.max}°C / {day.weatherInfo.temp.min}°C
                      </span>
                    </div>
                  )}
                </div>
              </div>
              
              <div className="p-4">
                {day.activities.length === 0 ? (
                  <p className="text-gray-500 italic">No activities planned for this day. Enjoy free time exploring {state.destination.split(',')[0]}!</p>
                ) : (
                  <ul className="space-y-3">
                    {day.activities.map((activity, index) => (
                      <li key={index} className="flex items-start">
                        <span className="text-xl mr-3 mt-0.5">{getActivityIconByType(activity.type)}</span>
                        <div>
                          <p className="font-medium">{activity.name}</p>
                          <p className="text-sm text-gray-600 capitalize">{activity.type.replace('_', ' ')}</p>
                          
                          {activity.weather && !getWeatherIsGood(activity.weather.main) && (
                            <p className="text-sm text-amber-600 mt-1">
                              Note: Check weather conditions before this activity
                            </p>
                          )}
                        </div>
                      </li>
                    ))}
                  </ul>
                )}
              </div>
            </div>
          ))}
        </div>
        
        {/* Travel Recommendations */}
        {state.betterTravelTimes && state.betterTravelTimes.length > 0 && (
          <div className="mt-8 p-4 bg-blue-50 rounded-md border border-blue-100">
            <h3 className="font-medium mb-3">Travel Time Recommendations</h3>
            <p className="mb-2">
              If your dates are flexible, consider visiting {state.destination.split(',')[0]} during these periods:
            </p>
            <ul className="space-y-2">
              {state.betterTravelTimes.map((time, index) => (
                <li key={index} className="flex items-start">
                  <span className="text-primary-600 mr-2">•</span>
                  <span><strong>{time.month}</strong>: {time.reason}</span>
                </li>
              ))}
            </ul>
          </div>
        )}
        
        {/* Emergency Information */}
        <div className="mt-8 p-4 bg-gray-50 rounded-md border border-gray-200">
          <h3 className="font-medium mb-3">Emergency Information</h3>
          <p className="text-sm text-gray-600 mb-2">Keep these numbers handy during your trip:</p>
          <ul className="text-sm space-y-1">
            <li><strong>Local Emergency:</strong> Check local emergency number (usually 112 or 911)</li>
            <li><strong>Tourist Police:</strong> Varies by destination</li>
            <li><strong>Embassy/Consulate:</strong> Check before your trip</li>
            <li><strong>Travel Insurance:</strong> [Your policy number]</li>
          </ul>
        </div>
      </div>
      
      {/* Final Note */}
      <div className="bg-accent-50 border border-accent-100 rounded-lg p-6 mb-8">
        <h3 className="font-medium text-lg mb-2">A Note About Your Trip</h3>
        <p className="text-gray-700 mb-4">
          We hope you enjoy your trip to {state.destination}! This itinerary is a suggestion based on your preferences and our recommendations. Feel free to adjust it to match your travel style and interests.
        </p>
        <p className="text-gray-700">
          Safe travels, and don't forget to share your experiences with us when you return!
        </p>
      </div>
      
      <div className="flex flex-col md:flex-row justify-between gap-4">
        <button
          onClick={() => navigate('/plan/flights')}
          className="btn btn-secondary"
        >
          Back to Flights
        </button>
        
        <div className="flex gap-4">
          <button
            onClick={handleNewTrip}
            className="btn btn-secondary flex items-center"
          >
            Plan Another Trip
          </button>
          
          <button
            className="btn btn-accent flex items-center"
            onClick={() => {
              // In a real app, this would open an email compose window
              alert('Email functionality would be implemented here')
            }}
          >
            <FaEnvelope className="mr-2" /> Email Itinerary
          </button>
        </div>
      </div>
    </motion.div>
  )
}

// Helper function to determine if weather is good for activities
function getWeatherIsGood(weatherMain) {
  const badWeather = ['Thunderstorm', 'Rain', 'Snow', 'Extreme', 'Drizzle', 'Tornado']
  return !badWeather.includes(weatherMain)
}

export default Itinerary